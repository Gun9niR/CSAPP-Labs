Dump of assembler code for function phase_3:
/*
 * Initialize registers.
 */
=> 0x0000000000400f43 <+0>:	sub    $0x18,%rsp
   0x0000000000400f47 <+4>:	lea    0xc(%rsp),%rcx
   0x0000000000400f4c <+9>:	lea    0x8(%rsp),%rdx
   0x0000000000400f51 <+14>:	mov    $0x4025cf,%esi
   0x0000000000400f56 <+19>:	mov    $0x0,%eax

/* 
 * Take two numbers as input. The address of the two numbers is given in the 3rd and 4th parameter, so it is stored in %rdx and %rcx respectively
 * %rdx is %rsp + 0x8, %rcx is %rsp + 12
 */
   0x0000000000400f5b <+24>:	callq  0x400bf0 <__isoc99_sscanf@plt>
   0x0000000000400f60 <+29>:	cmp    $0x1,%eax
   0x0000000000400f63 <+32>:	jg     0x400f6a <phase_3+39>
   0x0000000000400f65 <+34>:	callq  0x40143a <explode_bomb>

/*
 * An assertion that %rdx <= 7
 */
   0x0000000000400f6a <+39>:	cmpl   $0x7,0x8(%rsp)
   0x0000000000400f6f <+44>:	ja     0x400fad <phase_3+106>
   0x0000000000400f71 <+46>:	mov    0x8(%rsp),%eax

/*
 * Many places to jump to depending on the first input number.
 * All the mov-jmp statements can be possible choices of the jumpq instruction.
 */
   0x0000000000400f75 <+50>:	jmpq   *0x402470(,%rax,8)

/*
 * %rdx = 0
 * %eax = %rcx = 0xcf
 */
   0x0000000000400f7c <+57>:	mov    $0xcf,%eax
   0x0000000000400f81 <+62>:	jmp    0x400fbe <phase_3+123>

/*
 * %rdx = 2
 * %eax = %rcx = 0x2c3
 */
   0x0000000000400f83 <+64>:	mov    $0x2c3,%eax
   0x0000000000400f88 <+69>:	jmp    0x400fbe <phase_3+123>

/*
 * %rdx = 3
 * %eax = %rcx = 0x100
 */
   0x0000000000400f8a <+71>:	mov    $0x100,%eax
   0x0000000000400f8f <+76>:	jmp    0x400fbe <phase_3+123>

/*
 * %rdx = 4
 * %eax = %rcx = 0x185
 */
   0x0000000000400f91 <+78>:	mov    $0x185,%eax
   0x0000000000400f96 <+83>:	jmp    0x400fbe <phase_3+123>

/*
 * %rdx = 5
 * %eax = %rcx = 0xce
 */
   0x0000000000400f98 <+85>:	mov    $0xce,%eax
   0x0000000000400f9d <+90>:	jmp    0x400fbe <phase_3+123>

/*
 * %rdx = 6
 * %eax = %rcx = 0x2aa
 */
   0x0000000000400f9f <+92>:	mov    $0x2aa,%eax
   0x0000000000400fa4 <+97>:	jmp    0x400fbe <phase_3+123>

/*
 * %rdx = 7
 * %eax = %rcx = 0x147
 */
   0x0000000000400fa6 <+99>:	mov    $0x147,%eax
   0x0000000000400fab <+104>:	jmp    0x400fbe <phase_3+123>

/*
 * I don't understand how the program can possibly jump here.
*/
   0x0000000000400fad <+106>:	callq  0x40143a <explode_bomb>
   0x0000000000400fb2 <+111>:	mov    $0x0,%eax
   0x0000000000400fb7 <+116>:	jmp    0x400fbe <phase_3+123>

/*
 * %rdx = 1
 * %eax = %rcx = 0x137
 */
   0x0000000000400fb9 <+118>:	mov    $0x137,%eax

/*
 * Checking stage. The bomb won't explode only if *(%rcx) == %eax, which means <the second input number> == %eax
 */
   0x0000000000400fbe <+123>:	cmp    0xc(%rsp),%eax
   0x0000000000400fc2 <+127>:	je     0x400fc9 <phase_3+134>
   0x0000000000400fc4 <+129>:	callq  0x40143a <explode_bomb>
   0x0000000000400fc9 <+134>:	add    $0x18,%rsp
   0x0000000000400fcd <+138>:	retq   

/* 
 * As we can see, this bomb has 8 solutions. Pick whichever you want.
 */
