Dump of assembler code for function phase_5:
=> 0x0000000000401062 <+0>:	push   %rbx
   0x0000000000401063 <+1>:	sub    $0x20,%rsp
   0x0000000000401067 <+5>:	mov    %rdi,%rbx
   0x000000000040106a <+8>:	mov    %fs:0x28,%rax
   0x0000000000401073 <+17>:	mov    %rax,0x18(%rsp)
   0x0000000000401078 <+22>:	xor    %eax,%eax
   0x000000000040107a <+24>:	callq  0x40131b <string_length>

/*
 * The input has to be a 6-byte string.
 */
   0x000000000040107f <+29>:	cmp    $0x6,%eax
   0x0000000000401082 <+32>:	je     0x4010d2 <phase_5+112>
   0x0000000000401084 <+34>:	callq  0x40143a <explode_bomb>
   0x0000000000401089 <+39>:	jmp    0x4010d2 <phase_5+112>

/*
 * Loop for 6 times, going through each byte of the string.
 * The original byte is in (%rsp), masked byte is in %rdx
 * Then it does some kind of casting from lower bits to "maduiersnfotvbyl", 
   store it in %edx and then in %rsp + i + 16
 * So finally, there is a mapped string from %rsp + 16 to %rsp + 21
 */
   0x000000000040108b <+41>:	movzbl (%rbx,%rax,1),%ecx
   0x000000000040108f <+45>:	mov    %cl,(%rsp)
   0x0000000000401092 <+48>:	mov    (%rsp),%rdx           // original byte is in (%rsp), masked byte is in %rdx
   0x0000000000401096 <+52>:	and    $0xf,%edx             // make sure the byte < 16
   0x0000000000401099 <+55>:	movzbl 0x4024b0(%rdx),%edx   // do some kind of casting, the casting is
   0x00000000004010a0 <+62>:	mov    %dl,0x10(%rsp,%rax,1) 
   0x00000000004010a4 <+66>:	add    $0x1,%rax
   0x00000000004010a8 <+70>:	cmp    $0x6,%rax
   0x00000000004010ac <+74>:	jne    0x40108b <phase_5+41>

/*
 * The string stored in 0x40245e is "flyers", which is the mapped string.
 * So,
   lower 4 bit of 1st byte: 9
                  2nd byte: 15
                  3rd byte: 14
                  4th byte: 5
                  5th byte: 6
                  6th byte: 7
 * Of course you can't just input numbers. They have to be characters.
 * Add 64 to them. We get the solution <IONEFG>.
 * Or we can add 32. We get <)/.%&'>. It also works.
 */
   0x00000000004010ae <+76>:	movb   $0x0,0x16(%rsp)
   0x00000000004010b3 <+81>:	mov    $0x40245e,%esi
   0x00000000004010b8 <+86>:	lea    0x10(%rsp),%rdi
   0x00000000004010bd <+91>:	callq  0x401338 <strings_not_equal>

   0x00000000004010c2 <+96>:	test   %eax,%eax
   0x00000000004010c4 <+98>:	je     0x4010d9 <phase_5+119>
   0x00000000004010c6 <+100>:	callq  0x40143a <explode_bomb>
   0x00000000004010cb <+105>:	nopl   0x0(%rax,%rax,1)
   0x00000000004010d0 <+110>:	jmp    0x4010d9 <phase_5+119>

/*
 * Initialization for the loop from <+41> to <+74>
 */
   0x00000000004010d2 <+112>:	mov    $0x0,%eax
   0x00000000004010d7 <+117>:	jmp    0x40108b <phase_5+41>

/*
 * Check for buffer overflow and return.
 */
   0x00000000004010d9 <+119>:	mov    0x18(%rsp),%rax
   0x00000000004010de <+124>:	xor    %fs:0x28,%rax
   0x00000000004010e7 <+133>:	je     0x4010ee <phase_5+140>
   0x00000000004010e9 <+135>:	callq  0x400b30 <__stack_chk_fail@plt>
   0x00000000004010ee <+140>:	add    $0x20,%rsp
   0x00000000004010f2 <+144>:	pop    %rbx
   0x00000000004010f3 <+145>:	retq   

