Dump of assembler code for function phase_6:
   0x00000000004010f4 <+0>:	push   %r14
   0x00000000004010f6 <+2>:	push   %r13
   0x00000000004010f8 <+4>:	push   %r12
   0x00000000004010fa <+6>:	push   %rbp
   0x00000000004010fb <+7>:	push   %rbx
   0x00000000004010fc <+8>:	sub    $0x50,%rsp
   0x0000000000401100 <+12>:	mov    %rsp,%r13
   0x0000000000401103 <+15>:	mov    %rsp,%rsi
/*
 * %rsi is the starting address of six numbers. 
 * Address of six numbers stored in %rdx    %rcx    %r8     %r9     %rax    %rsp + 8
                                    %rsp    %rsp+4  %rsp+8  %rsp+12 %rsp+16 %rsp+20
 */
   0x0000000000401106 <+18>:	callq  0x40145c <read_six_numbers>

   0x000000000040110b <+23>:	mov    %rsp,%r14
   0x000000000040110e <+26>:	mov    $0x0,%r12d

/*
 * <+32> to <+93> is the first stage.
 * %r13 is a pointer that goes through all numbers, %r12d is the (index of *r13) + 1
   %ebx iterates through numbers of index %r12d to 5, making sure the numbers are not equal to *r13
 * Therefore, this stage tells us that all numbers are not equal.
 * Also, <+39> to <+45> tells us all numbers are in [1, 6]
 */ 
   0x0000000000401114 <+32>:	mov    %r13,%rbp                 // backup %r13 in %rbp
   0x0000000000401117 <+35>:	mov    0x0(%r13),%eax
   0x000000000040111b <+39>:	sub    $0x1,%eax
   0x000000000040111e <+42>:	cmp    $0x5,%eax                 // 1 <= *r13 <= 6 is a must
   0x0000000000401121 <+45>:	jbe    0x401128 <phase_6+52>     
   0x0000000000401123 <+47>:	callq  0x40143a <explode_bomb>

   0x0000000000401128 <+52>:	add    $0x1,%r12d                // %r12d(i): idx of *r13
   0x000000000040112c <+56>:	cmp    $0x6,%r12d    
   0x0000000000401130 <+60>:	je     0x401153 <phase_6+95>
   0x0000000000401132 <+62>:	mov    %r12d,%ebx                // %r12d -> %ebx

   0x0000000000401135 <+65>:	movslq %ebx,%rax                 // %ebx -> %rax  
   0x0000000000401138 <+68>:	mov    (%rsp,%rax,4),%eax        // extract nums[%ebx] and put them in %eax
   0x000000000040113b <+71>:	cmp    %eax,0x0(%rbp)            // they must not be equal to *r13
   0x000000000040113e <+74>:	jne    0x401145 <phase_6+81>
   0x0000000000401140 <+76>:	callq  0x40143a <explode_bomb>
   0x0000000000401145 <+81>:	add    $0x1,%ebx                 // 
   0x0000000000401148 <+84>:	cmp    $0x5,%ebx                 // %ebx(j): i to 5
   0x000000000040114b <+87>:	jle    0x401135 <phase_6+65>

   0x000000000040114d <+89>:	add    $0x4,%r13                 // %r13 point to the next number
   0x0000000000401151 <+93>:	jmp    0x401114 <phase_6+32>     // %r13 iterates throgh all numbers

/*
 * <+95> to <+121> is the second stage.
 * <+95> tp <+103> is initialization
 * The operation performed is: nums[i] = 7 - nums[i];
 */ 
   0x0000000000401153 <+95>:	lea    0x18(%rsp),%rsi           // address after the last number -> %rsi
   0x0000000000401158 <+100>:	mov    %r14,%rax                 // %rax start from &nums[0]
   0x000000000040115b <+103>:	mov    $0x7,%ecx                 // 7 -> %ecx

   0x0000000000401160 <+108>:	mov    %ecx,%edx                 // 7 -> %edx
   0x0000000000401162 <+110>:	sub    (%rax),%edx               // (%edx - *rax) -> %edx
   0x0000000000401164 <+112>:	mov    %edx,(%rax)               // %edx -> %rax
   0x0000000000401166 <+114>:	add    $0x4,%rax                 // %rax to the next number
   0x000000000040116a <+118>:	cmp    %rsi,%rax                 
   0x000000000040116d <+121>:	jne    0x401160 <phase_6+108>    // %rax goes through the address of all numbers

/*
 * <+123> to <+181> is the third stage (also the most tricky stage)
 * For each number nums[%rsi], if this number == 1, 
   we put a strange number($0x6032d0) to *(rsp + 32 + 2 * %rsi)
   otherwise, we do some sort of chain mapping of address(in %rdx) for nums[%rsi] times, starting with 0x6032d0,
   and then store *(rdx + 8) in *(rsp + 32 + 2 * %rsi)
 * The chain mapping is: 0x6032d0 -> 0x6032e0 -> 0x6032f0 -> 0x603300 -> 0x603310 -> 0x603320
                         332         168         924         691         477         443
 * The stack use is (%rsp + 32), (%rsp + 40) (+48), (+56), (+64), (+72), luckily we have 80 bytes for the stack!
 */
   0x000000000040116f <+123>:	mov    $0x0,%esi                 // 0 -> %esi
   0x0000000000401174 <+128>:	jmp    0x401197 <phase_6+163>

   0x0000000000401176 <+130>:	mov    0x8(%rdx),%rdx            // *(rdx + 8) -> %rdx
   0x000000000040117a <+134>:	add    $0x1,%eax                 // %eax++
   0x000000000040117d <+137>:	cmp    %ecx,%eax                 
   0x000000000040117f <+139>:	jne    0x401176 <phase_6+130>    // %eax == %ecx to <+148>
   0x0000000000401181 <+141>:	jmp    0x401188 <phase_6+148>    // otherwise to <+130>

   0x0000000000401183 <+143>:	mov    $0x6032d0,%edx            // ??? -> %edx
   0x0000000000401188 <+148>:	mov    %rdx,0x20(%rsp,%rsi,2)    // %rdx -> *(rsp + 32 + 2 * %rsi)
   0x000000000040118d <+153>:	add    $0x4,%rsi                 // rsi += 4
   0x0000000000401191 <+157>:	cmp    $0x18,%rsi                
   0x0000000000401195 <+161>:	je     0x4011ab <phase_6+183>    // if (rsi == 24) to next stage 

   0x0000000000401197 <+163>:	mov    (%rsp,%rsi,1),%ecx        // *(%rsp + %esi) -> %ecx
   0x000000000040119a <+166>:	cmp    $0x1,%ecx                 // %ecx <= 1, then to <+143>
   0x000000000040119d <+169>:	jle    0x401183 <phase_6+143>    // otherwise to <+171>

   0x000000000040119f <+171>:	mov    $0x1,%eax                 // 1 -> %eax
   0x00000000004011a4 <+176>:	mov    $0x6032d0,%edx            // ??? -> %edx
   0x00000000004011a9 <+181>:	jmp    0x401176 <phase_6+130>

/*
 * <+183> to <+220> is the fourth stage
 * After the 3rd stage, stored in the stack are memories in the chain with a certain order.
 * For each address[i] (2 <= i <= 6), it sets *(address[i - 1] + 8) to address[i], somewhat like setting a linked list.
 */
   0x00000000004011ab <+183>:	mov    0x20(%rsp),%rbx           // *(rsp + 32) (also the first address in the chain)-> %rbx
   0x00000000004011b0 <+188>:	lea    0x28(%rsp),%rax           // %rsp + 40 -> %rax
   0x00000000004011b5 <+193>:	lea    0x50(%rsp),%rsi           // %rsp + 80 -> %rsi
   0x00000000004011ba <+198>:	mov    %rbx,%rcx                 // the first address in the chain -> %rcx

   0x00000000004011bd <+201>:	mov    (%rax),%rdx               // the second address in the chain -> %rdx
   0x00000000004011c0 <+204>:	mov    %rdx,0x8(%rcx)            // %rdx -> corresponding number of the first address (by corresponding I mean the number stored at *(address + 8))
   0x00000000004011c4 <+208>:	add    $0x8,%rax                 // %rax += 8

   0x00000000004011c8 <+212>:	cmp    %rsi,%rax                 
   0x00000000004011cb <+215>:	je     0x4011d2 <phase_6+222>
   0x00000000004011cd <+217>:	mov    %rdx,%rcx                 // if %rax != stack bottom, %rdx -> %rcx
   0x00000000004011d0 <+220>:	jmp    0x4011bd <phase_6+201>    // jump to <+201>

/*
 * <+222> to <+257> is the last stage
 * It checks the linked list(*address[i], i = 1, 2... 6) and defuse the bomb if it forms a non-increasing sequence
 */
   0x00000000004011d2 <+222>:	movq   $0x0,0x8(%rdx)            // %rdx is address[6], so it sets *(address[6] + 8) to 0. Just like the last node of the linked list?
   0x00000000004011da <+230>:	mov    $0x5,%ebp                 // 5 -> %ebp
   0x00000000004011df <+235>:	mov    0x8(%rbx),%rax            // next address of %rbx -> %rax
   0x00000000004011e3 <+239>:	mov    (%rax),%eax               // *rax -> %eax
   0x00000000004011e5 <+241>:	cmp    %eax,(%rbx)               // *rbx >= *rax, meaning the former > the latter
   0x00000000004011e7 <+243>:	jge    0x4011ee <phase_6+250>
   0x00000000004011e9 <+245>:	callq  0x40143a <explode_bomb>
   0x00000000004011ee <+250>:	mov    0x8(%rbx),%rbx            // %rbx to the next address
   0x00000000004011f2 <+254>:	sub    $0x1,%ebp                 // loop 5 times
   0x00000000004011f5 <+257>:	jne    0x4011df <phase_6+235>

   /*
    * Restore callee-saved registers and return
    */
   0x00000000004011f7 <+259>:	add    $0x50,%rsp
   0x00000000004011fb <+263>:	pop    %rbx
   0x00000000004011fc <+264>:	pop    %rbp
   0x00000000004011fd <+265>:	pop    %r12
   0x00000000004011ff <+267>:	pop    %r13
   0x0000000000401201 <+269>:	pop    %r14
   0x0000000000401203 <+271>:	retq   

/*
 * The six numers are: 332, 168, 924, 691, 477, 443
 * So, for them to form a non-increasing sequence, the numbers after nums[i] = 7 - nums[i] are: 3 4 5 6 1 2
 * The solution is: 4 3 2 1 6 5
 */

